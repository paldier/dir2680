diff -ruN a/src/libcharon/encoding/message.c b/src/libcharon/encoding/message.c
--- a/src/libcharon/encoding/message.c	2016-04-23 04:01:35.000000000 +0800
+++ b/src/libcharon/encoding/message.c	2018-02-26 12:51:04.211296041 +0800
@@ -1734,7 +1734,7 @@
 		enumerator->destroy(enumerator);
 	}
 
-	DBG1(DBG_ENC, "generating %s", get_string(this, str, sizeof(str)));
+	//DBG1(DBG_ENC, "generating %s", get_string(this, str, sizeof(str)));
 
 	if (keymat)
 	{
@@ -2651,7 +2651,7 @@
 		return status;
 	}
 
-	DBG1(DBG_ENC, "parsed %s", get_string(this, str, sizeof(str)));
+	//DBG1(DBG_ENC, "parsed %s", get_string(this, str, sizeof(str)));
 
 	if (keymat && keymat->get_version(keymat) == IKEV1)
 	{
diff -ruN a/src/libcharon/sa/ike_sa.c b/src/libcharon/sa/ike_sa.c
--- a/src/libcharon/sa/ike_sa.c	2016-06-20 16:49:09.000000000 +0800
+++ b/src/libcharon/sa/ike_sa.c	2018-02-26 12:58:30.668320753 +0800
@@ -829,7 +829,7 @@
 					this->stats[STAT_REKEY] = t + this->stats[STAT_ESTABLISHED];
 					job = (job_t*)rekey_ike_sa_job_create(this->ike_sa_id, FALSE);
 					lib->scheduler->schedule_job(lib->scheduler, job, t);
-					DBG1(DBG_IKE, "scheduling rekeying in %ds", t);
+					//DBG1(DBG_IKE, "scheduling rekeying in %ds", t);
 				}
 				t = this->peer_cfg->get_reauth_time(this->peer_cfg, TRUE);
 				if (t && (this->stats[STAT_REAUTH] == 0 ||
@@ -838,7 +838,7 @@
 					this->stats[STAT_REAUTH] = t + this->stats[STAT_ESTABLISHED];
 					job = (job_t*)rekey_ike_sa_job_create(this->ike_sa_id, TRUE);
 					lib->scheduler->schedule_job(lib->scheduler, job, t);
-					DBG1(DBG_IKE, "scheduling reauthentication in %ds", t);
+					//DBG1(DBG_IKE, "scheduling reauthentication in %ds", t);
 				}
 				t = this->peer_cfg->get_over_time(this->peer_cfg);
 				if (this->stats[STAT_REKEY] || this->stats[STAT_REAUTH])
@@ -860,7 +860,7 @@
 					t = this->stats[STAT_DELETE] - this->stats[STAT_ESTABLISHED];
 					job = (job_t*)delete_ike_sa_job_create(this->ike_sa_id, TRUE);
 					lib->scheduler->schedule_job(lib->scheduler, job, t);
-					DBG1(DBG_IKE, "maximum IKE_SA lifetime %ds", t);
+					//DBG1(DBG_IKE, "maximum IKE_SA lifetime %ds", t);
 				}
 				trigger_dpd = this->peer_cfg->get_dpd(this->peer_cfg);
 				if (trigger_dpd)
diff -ruN a/src/libcharon/sa/ikev1/phase1.c b/src/libcharon/sa/ikev1/phase1.c
--- a/src/libcharon/sa/ikev1/phase1.c	2016-04-23 04:01:35.000000000 +0800
+++ b/src/libcharon/sa/ikev1/phase1.c	2018-02-26 12:54:47.260308387 +0800
@@ -553,8 +553,8 @@
 
 	me = this->ike_sa->get_my_host(this->ike_sa);
 	other = this->ike_sa->get_other_host(this->ike_sa);
-	DBG1(DBG_CFG, "looking for %N peer configs matching %H...%H[%Y]",
-		 auth_method_names, method, me, other, id);
+	//DBG1(DBG_CFG, "looking for %N peer configs matching %H...%H[%Y]",
+	//	 auth_method_names, method, me, other, id);
 	enumerator = charon->backends->create_peer_cfg_enumerator(charon->backends,
 													me, other, NULL, id, IKEV1);
 	while (enumerator->enumerate(enumerator, &current))
diff -ruN a/src/libcharon/sa/ikev1/tasks/isakmp_delete.c b/src/libcharon/sa/ikev1/tasks/isakmp_delete.c
--- a/src/libcharon/sa/ikev1/tasks/isakmp_delete.c	2016-04-23 04:01:35.000000000 +0800
+++ b/src/libcharon/sa/ikev1/tasks/isakmp_delete.c	2018-02-26 15:53:18.007901228 +0800
@@ -45,6 +45,7 @@
 	delete_payload_t *delete_payload;
 	ike_sa_id_t *id;
 
+#if 0
 	DBG0(DBG_IKE, "deleting IKE_SA %s[%d] between %H[%Y]...%H[%Y]",
 		 this->ike_sa->get_name(this->ike_sa),
 		 this->ike_sa->get_unique_id(this->ike_sa),
@@ -52,6 +53,7 @@
 		 this->ike_sa->get_my_id(this->ike_sa),
 		 this->ike_sa->get_other_host(this->ike_sa),
 		 this->ike_sa->get_other_id(this->ike_sa));
+#endif
 
 	delete_payload = delete_payload_create(PLV1_DELETE, PROTO_IKE);
 	id = this->ike_sa->get_id(this->ike_sa);
@@ -113,6 +115,7 @@
 		return SUCCESS;
 	}
 
+#if 0
 	DBG1(DBG_IKE, "received DELETE for IKE_SA %s[%d]",
 		 this->ike_sa->get_name(this->ike_sa),
 		 this->ike_sa->get_unique_id(this->ike_sa));
@@ -123,6 +126,7 @@
 		 this->ike_sa->get_my_id(this->ike_sa),
 		 this->ike_sa->get_other_host(this->ike_sa),
 		 this->ike_sa->get_other_id(this->ike_sa));
+#endif
 
 	if (this->ike_sa->get_state(this->ike_sa) == IKE_ESTABLISHED)
 	{
diff -ruN a/src/libcharon/sa/ikev1/tasks/quick_delete.c b/src/libcharon/sa/ikev1/tasks/quick_delete.c
--- a/src/libcharon/sa/ikev1/tasks/quick_delete.c	2016-04-23 04:01:35.000000000 +0800
+++ b/src/libcharon/sa/ikev1/tasks/quick_delete.c	2018-02-26 15:50:14.408891066 +0800
@@ -125,12 +125,14 @@
 		child_sa->get_usestats(child_sa, TRUE, NULL, &bytes_in, NULL);
 		child_sa->get_usestats(child_sa, FALSE, NULL, &bytes_out, NULL);
 
+#if 0
 		DBG0(DBG_IKE, "closing CHILD_SA %s{%d} with SPIs "
 			 "%.8x_i (%llu bytes) %.8x_o (%llu bytes) and TS %#R === %#R",
 			 child_sa->get_name(child_sa), child_sa->get_unique_id(child_sa),
 			 ntohl(child_sa->get_spi(child_sa, TRUE)), bytes_in,
 			 ntohl(child_sa->get_spi(child_sa, FALSE)), bytes_out,
 			 my_ts, other_ts);
+#endif
 	}
 	my_ts->destroy(my_ts);
 	other_ts->destroy(other_ts);
@@ -216,8 +218,8 @@
 			spis = delete_payload->create_spi_enumerator(delete_payload);
 			while (spis->enumerate(spis, &spi))
 			{
-				DBG1(DBG_IKE, "received DELETE for %N CHILD_SA with SPI %.8x",
-					 protocol_id_names, protocol, ntohl(spi));
+				//DBG1(DBG_IKE, "received DELETE for %N CHILD_SA with SPI %.8x",
+				//	 protocol_id_names, protocol, ntohl(spi));
 				if (!delete_child(this, protocol, spi, TRUE))
 				{
 					DBG1(DBG_IKE, "CHILD_SA not found, ignored");
diff -ruN a/src/libcharon/sa/ikev1/tasks/quick_mode.c b/src/libcharon/sa/ikev1/tasks/quick_mode.c
--- a/src/libcharon/sa/ikev1/tasks/quick_mode.c	2016-06-20 16:49:09.000000000 +0800
+++ b/src/libcharon/sa/ikev1/tasks/quick_mode.c	2018-02-26 13:01:38.858331169 +0800
@@ -392,12 +392,14 @@
 	other_ts = linked_list_create_from_enumerator(
 				this->child_sa->create_ts_enumerator(this->child_sa, FALSE));
 
+#if 0
 	DBG0(DBG_IKE, "CHILD_SA %s{%d} established "
 		 "with SPIs %.8x_i %.8x_o and TS %#R === %#R",
 		 this->child_sa->get_name(this->child_sa),
 		 this->child_sa->get_unique_id(this->child_sa),
 		 ntohl(this->child_sa->get_spi(this->child_sa, TRUE)),
 		 ntohl(this->child_sa->get_spi(this->child_sa, FALSE)), my_ts, other_ts);
+#endif
 
 	my_ts->destroy(my_ts);
 	other_ts->destroy(other_ts);
diff -ruN a/src/libcharon/sa/ikev2/tasks/child_create.c b/src/libcharon/sa/ikev2/tasks/child_create.c
--- a/src/libcharon/sa/ikev2/tasks/child_create.c	2016-06-20 16:49:09.000000000 +0800
+++ b/src/libcharon/sa/ikev2/tasks/child_create.c	2018-02-26 13:02:06.834332718 +0800
@@ -731,12 +731,14 @@
 	other_ts = linked_list_create_from_enumerator(
 				this->child_sa->create_ts_enumerator(this->child_sa, FALSE));
 
+#if 0
 	DBG0(DBG_IKE, "CHILD_SA %s{%d} established "
 		 "with SPIs %.8x_i %.8x_o and TS %#R === %#R",
 		 this->child_sa->get_name(this->child_sa),
 		 this->child_sa->get_unique_id(this->child_sa),
 		 ntohl(this->child_sa->get_spi(this->child_sa, TRUE)),
 		 ntohl(this->child_sa->get_spi(this->child_sa, FALSE)), my_ts, other_ts);
+#endif
 
 	my_ts->destroy(my_ts);
 	other_ts->destroy(other_ts);
diff -ruN a/src/libcharon/sa/ikev2/tasks/child_delete.c b/src/libcharon/sa/ikev2/tasks/child_delete.c
--- a/src/libcharon/sa/ikev2/tasks/child_delete.c	2016-06-20 16:49:09.000000000 +0800
+++ b/src/libcharon/sa/ikev2/tasks/child_delete.c	2018-02-26 15:49:58.639890193 +0800
@@ -176,12 +176,12 @@
 													  spi, FALSE);
 				if (child_sa == NULL)
 				{
-					DBG1(DBG_IKE, "received DELETE for %N CHILD_SA with SPI %.8x, "
-						 "but no such SA", protocol_id_names, protocol, ntohl(spi));
+					//DBG1(DBG_IKE, "received DELETE for %N CHILD_SA with SPI %.8x, "
+					//	 "but no such SA", protocol_id_names, protocol, ntohl(spi));
 					continue;
 				}
-				DBG1(DBG_IKE, "received DELETE for %N CHILD_SA with SPI %.8x",
-					 protocol_id_names, protocol, ntohl(spi));
+				//DBG1(DBG_IKE, "received DELETE for %N CHILD_SA with SPI %.8x",
+				//	 protocol_id_names, protocol, ntohl(spi));
 
 				switch (child_sa->get_state(child_sa))
 				{
@@ -310,13 +310,14 @@
 		{
 			child_sa->get_usestats(child_sa, TRUE, NULL, &bytes_in, NULL);
 			child_sa->get_usestats(child_sa, FALSE, NULL, &bytes_out, NULL);
-
+#if 0
 			DBG0(DBG_IKE, "closing CHILD_SA %s{%d} with SPIs %.8x_i "
 				 "(%llu bytes) %.8x_o (%llu bytes) and TS %#R === %#R",
 				 child_sa->get_name(child_sa), child_sa->get_unique_id(child_sa),
 				 ntohl(child_sa->get_spi(child_sa, TRUE)), bytes_in,
 				 ntohl(child_sa->get_spi(child_sa, FALSE)), bytes_out,
 				 my_ts, other_ts);
+#endif
 		}
 		my_ts->destroy(my_ts);
 		other_ts->destroy(other_ts);
diff -ruN a/src/libcharon/sa/ikev2/tasks/ike_delete.c b/src/libcharon/sa/ikev2/tasks/ike_delete.c
--- a/src/libcharon/sa/ikev2/tasks/ike_delete.c	2016-06-20 16:49:09.000000000 +0800
+++ b/src/libcharon/sa/ikev2/tasks/ike_delete.c	2018-02-26 15:54:21.225904727 +0800
@@ -53,6 +53,7 @@
 {
 	delete_payload_t *delete_payload;
 
+#if 0
 	DBG0(DBG_IKE, "deleting IKE_SA %s[%d] between %H[%Y]...%H[%Y]",
 		 this->ike_sa->get_name(this->ike_sa),
 		 this->ike_sa->get_unique_id(this->ike_sa),
@@ -60,6 +61,7 @@
 		 this->ike_sa->get_my_id(this->ike_sa),
 		 this->ike_sa->get_other_host(this->ike_sa),
 		 this->ike_sa->get_other_id(this->ike_sa));
+#endif
 
 	delete_payload = delete_payload_create(PLV2_DELETE, PROTO_IKE);
 	message->add_payload(message, (payload_t*)delete_payload);
@@ -122,6 +124,7 @@
 {
 	/* we don't even scan the payloads, as the message wouldn't have
 	 * come so far without being correct */
+#if 0
 	DBG1(DBG_IKE, "received DELETE for IKE_SA %s[%d]",
 		 this->ike_sa->get_name(this->ike_sa),
 		 this->ike_sa->get_unique_id(this->ike_sa));
@@ -132,6 +135,7 @@
 		 this->ike_sa->get_my_id(this->ike_sa),
 		 this->ike_sa->get_other_host(this->ike_sa),
 		 this->ike_sa->get_other_id(this->ike_sa));
+#endif
 
 	if (message->get_exchange_type(message) == INFORMATIONAL &&
 		message->get_notify(message, AUTHENTICATION_FAILED))
