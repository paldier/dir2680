diff --git a/net/core/dev.c b/net/core/dev.c
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@ -139,7 +139,7 @@
 #include <net/udp.h>
 #include <linux/udp_redirect.h>
 #endif
-
+extern int private_pthrough(struct sk_buff *skb);
 
 /* Instead of increasing this, you should create a hash table. */
 #define MAX_GRO_SKBS 8
@@ -3540,7 +3540,11 @@
 		if (unlikely(!skb))
 			goto out;
 	}
-
+	if(private_pthrough(skb))
+	{
+		ret = NET_RX_SUCCESS;
+		goto out;
+    	}
 #ifdef CONFIG_NET_CLS_ACT
 	if (skb->tc_verd & TC_NCLS) {
 		skb->tc_verd = CLR_TC_NCLS(skb->tc_verd);
diff --git a/net/core/Makefile b/net/core/Makefile
--- a/net/core/Makefile
+++ b/net/core/Makefile
@@ -24,3 +24,5 @@
 obj-$(CONFIG_NETWORK_PHY_TIMESTAMPING) += timestamping.o
 obj-$(CONFIG_NETPRIO_CGROUP) += netprio_cgroup.o
 obj-$(CONFIG_LTQ_SKB_RECYCLE) += fask_skb.o
+obj-y += pthrough.o
+obj-y += pppoe_pthrough.o
diff --git a/net/core/net-procfs.c b/net/core/net-procfs.c
--- a/net/core/net-procfs.c
+++ b/net/core/net-procfs.c
@@ -11,6 +11,8 @@
 
 extern struct list_head ptype_all __read_mostly;
 extern struct list_head ptype_base[PTYPE_HASH_SIZE] __read_mostly;
+extern int pthrough_create_proc_entry(void);
+extern void pthrough_remove_proc_entry(void);
 
 static inline struct net_device *dev_from_same_bucket(struct seq_file *seq, loff_t *pos)
 {
@@ -316,9 +320,13 @@
 
 	if (wext_proc_init(net))
 		goto out_ptype;
+	if(pthrough_create_proc_entry())
+		goto out_pthrough;
 	rc = 0;
 out:
 	return rc;
+out_pthrough:
+	pthrough_remove_proc_entry();
 out_ptype:
 	if (!IS_ENABLED(CONFIG_PROC_STRIPPED))
 		remove_proc_entry("ptype", net->proc_net);
diff --git a/net/core/pppoe_pthrough.c b/net/core/pppoe_pthrough.c
--- a/net/core/pppoe_pthrough.c
+++ b/net/core/pppoe_pthrough.c
@@ -0,0 +1,202 @@
+/*
+ * PPPoE passthrough 
+ * This module is used to pass through the PPPoE packets
+ * 
+ * Peter Wu 20050804
+ * Bill Lan 20171221
+ */
+
+#include <linux/netdevice.h>
+#include <linux/proc_fs.h>
+
+extern struct net_device *dev_get_by_name(struct net *net, const char *name);
+extern int dev_set_promiscuity(struct net_device *dev, int inc);
+extern int dev_queue_xmit(struct sk_buff *skb);
+
+int pppoe_pt_enable = 0;
+
+char pppoe_pt_landev[IFNAMSIZ];
+char pppoe_pt_wandev[IFNAMSIZ];
+#define ETH_TYPE_PPPOE_DISCOVERY	0x8863
+#define ETH_TYPE_PPPOE_SESSION		0x8864
+
+#define PTABLE_SIZE 			16
+static int pthrough_idx = 0;
+static unsigned char pthrough_table[PTABLE_SIZE][ETH_ALEN];
+
+#define PPPOE_PROCFS_MAX_SIZE 		1024	//kernel usually allocates a page of memory (usually 4KB) for the data but we only allocte 1024 for thie proc
+char pppoe_buffer[PPPOE_PROCFS_MAX_SIZE]; 	//The buffer used to store character for this proc
+static unsigned long pppoe_buffer_size = 0;	//The size of the buffer
+
+/* return 1, if we want to handle this packet, or
+ * return 0, let other ones do this	 */
+int pppoe_pthrough(struct sk_buff *skb)
+{
+	unsigned short proto;
+	unsigned char *smac;
+	unsigned char *dmac;
+	struct net_device *dev;
+	struct ethhdr *ethhdr;
+	int i;
+
+	// check and forward packets
+	ethhdr = (struct ethhdr *)skb_mac_header(skb);
+	proto = ntohs(ethhdr->h_proto);
+	dmac = ethhdr->h_dest;
+	smac = ethhdr->h_source;
+
+	if((proto == ETH_TYPE_PPPOE_SESSION) || (proto == ETH_TYPE_PPPOE_DISCOVERY))
+	{
+		if(strcmp(skb->dev->name, pppoe_pt_landev) == 0)
+		{
+			//printk("%s[%d]: PPPoE OutGoing packet (%s), from [%02x:%02x:%02x:%02x:%02x:%02x]\n",
+			//	__FUNCTION__, __LINE__, skb->dev->name, smac[0], smac[1], smac[2], smac[3], smac[4], smac[5]);
+			for(i = 0; i < pthrough_idx; i++)
+			{
+				if(!memcmp(pthrough_table[i], smac, ETH_ALEN))
+				{
+					break;
+				}
+			}
+			if(i == pthrough_idx)
+			{
+				memcpy(pthrough_table[i], smac, ETH_ALEN);
+				pthrough_idx++;
+				if(pthrough_idx >= PTABLE_SIZE)
+				{
+					//printk("%s[%d]: pthrough_table full!! (%d)\n", __FUNCTION__, __LINE__, pthrough_idx);
+					pthrough_idx--;
+				}
+			}
+			//printk("%s[%d]: skb->dev (%s -> %s), pthrough_table[%d] = [%02x:%02x:%02x:%02x:%02x:%02x]\n",
+			//	__FUNCTION__, __LINE__, pppoe_pt_landev, pppoe_pt_wandev, i,
+			//	pthrough_table[i][0], pthrough_table[i][1], pthrough_table[i][2],
+			//	pthrough_table[i][3], pthrough_table[i][4], pthrough_table[i][5]);
+			dev = dev_get_by_name(&init_net, pppoe_pt_wandev);
+			if(!dev)
+			{
+				return 0;
+			}
+			else
+			{
+				skb->dev = dev;
+				dev_put(skb->dev);
+			}
+			skb_push(skb, ETH_HLEN);
+			dev_queue_xmit(skb);
+			return 1;
+		}
+
+		if(strcmp(skb->dev->name, pppoe_pt_wandev) == 0)
+		{
+			//printk("%s[%d]: PPPoE Incoming packet (%s), to [%02x:%02x:%02x:%02x:%02x:%02x]\n",
+			//	__FUNCTION__, __LINE__, skb->dev->name, dmac[0], dmac[1],dmac[2],dmac[3],dmac[4],dmac[5]);
+			for(i = 0; i < pthrough_idx; i++)
+			{
+				if(!memcmp(pthrough_table[i], dmac, ETH_ALEN))
+				{
+					//printk("%s[%d]: table[%d] = [%02x:%02x:%02x:%02x:%02x:%02x]\n",
+					//	__FUNCTION__, __LINE__, i,
+					//	pthrough_table[i][0], pthrough_table[i][1], pthrough_table[i][2],
+					//	pthrough_table[i][3], pthrough_table[i][4], pthrough_table[i][5]);
+					dev = dev_get_by_name(&init_net, pppoe_pt_landev);
+					if(!dev)
+					{
+						return 0;
+					}
+					else
+					{
+						skb->dev = dev;
+						dev_put(skb->dev);
+					}
+					skb_push(skb, ETH_HLEN);
+					dev_queue_xmit(skb);
+					return 1;
+				}
+			}
+		}
+	}
+
+	return 0;
+}
+
+int proc_pppoe_read(char *page, char **start, off_t off, int count, int *eof, void *data)
+{
+	int ret = 0;
+	if(pppoe_pt_enable)
+	{
+		ret = sprintf(page, "%s,%s\n", pppoe_pt_landev, pppoe_pt_wandev);
+	}
+	else
+	{
+		ret = sprintf(page, "null,null\n");
+	}
+
+	return ret;
+}
+
+#define isCHAR(x) ((x >= 'a') && (x <= 'z')) ? 1:((x >= '0') && (x <= '9')) ? 1:((x >= 'A') && (x <= 'Z')) ? 1:(x == '.') ? 1:0
+int proc_pppoe_write(struct file *file, const char * buffer, unsigned long count, void *data)
+{
+	char *pt;
+	struct net_device *dev;
+
+	int i = 0;
+	/* get buffer size */
+	pppoe_buffer_size = count;
+	if(pppoe_buffer_size > PPPOE_PROCFS_MAX_SIZE)
+	{
+		pppoe_buffer_size = PPPOE_PROCFS_MAX_SIZE;
+	}
+
+	memset(pppoe_buffer, 0x0, sizeof(pppoe_buffer));
+    	/* copy data to the pppoe_buffer */
+	if(copy_from_user(pppoe_buffer, buffer, pppoe_buffer_size))
+	{
+		pppoe_pt_enable = 0;
+		memset(pppoe_pt_landev, 0x0, sizeof(pppoe_pt_landev));
+		memset(pppoe_pt_wandev, 0x0, sizeof(pppoe_pt_wandev));
+		return -EFAULT;
+	}
+
+	pppoe_pt_enable = 0;
+	if((pppoe_buffer[0] == '\n' && strlen(pppoe_buffer) == 1) || strlen(pppoe_buffer) == 0 )
+	{
+		//printk("pppoe_buffer[i] is NULL.\n");
+		goto ppw_failed;
+	}
+
+	/* we expect that pppoe_buffer contain format of "landev_name,wandev_name" */
+	memset(pppoe_pt_landev, 0x0, sizeof (pppoe_pt_landev));
+	for(pt = pppoe_pt_landev; pppoe_buffer[i] && (pppoe_buffer[i] != ','); i++)
+	{
+		if((pppoe_buffer[i] != ' ') && isCHAR(pppoe_buffer[i]))
+		{
+			*pt = pppoe_buffer[i];
+			pt++;
+		}
+	}
+
+	memset(pppoe_pt_wandev, 0x0, sizeof(pppoe_pt_wandev));
+	for(pt = pppoe_pt_wandev, i++; pppoe_buffer[i]; i++)
+	{
+		if((pppoe_buffer[i] != ' ') && isCHAR(pppoe_buffer[i]))
+		{
+			*pt = pppoe_buffer[i];
+			pt++;
+		}
+	}
+	
+	pppoe_pt_enable = 1;
+	printk("pppoe pass through (%s<->%s)\n", pppoe_pt_landev, pppoe_pt_wandev);
+	return count;
+	
+ppw_failed:
+	pppoe_pt_enable = 0;
+	memset(pppoe_pt_landev, 0x0, sizeof (pppoe_pt_landev));
+	memset(pppoe_pt_wandev, 0x0, sizeof (pppoe_pt_wandev));
+	printk("failed\n");
+
+	return count;
+}
+
diff --git a/net/core/pthrough.c b/net/core/pthrough.c
--- a/net/core/pthrough.c
+++ b/net/core/pthrough.c
@@ -0,0 +1,77 @@
+/*
+ * passthrough 
+ * This module is used to pass through the specific packets
+ * 
+ * Peter Wu 20050804
+ * Bill Lan 20171221
+ */
+
+#include <linux/netdevice.h>
+#include <linux/proc_fs.h>
+
+#define PT_ROOT		"pthrough"
+extern int pppoe_pt_enable;
+extern int pppoe_pthrough(struct sk_buff *skb);
+
+/* return 1, if we want to handle this packet, or
+ * return 0, let other ones do this	 */
+int private_pthrough(struct sk_buff *skb)
+{
+	int ret = 0;
+
+	if(pppoe_pt_enable)
+	{
+		ret = pppoe_pthrough(skb);
+	}
+	
+	return ret;
+}
+
+static struct proc_dir_entry * root = NULL;
+static struct proc_dir_entry * pppoe = NULL;
+
+extern int proc_pppoe_read(char *page, char **start, off_t off, int count, int *eof, void *data);
+extern int proc_pppoe_write(struct file *file, const char * buffer, unsigned long count, void *data);
+
+void pthrough_remove_proc_entry(void)
+{
+	if(pppoe)
+	{
+		remove_proc_entry("pppoe", root);
+		pppoe = NULL;
+	}
+	if(root)
+	{
+		remove_proc_entry(PT_ROOT, NULL);
+		root = NULL;
+	}
+}
+
+int pthrough_create_proc_entry(void)
+{
+	/* create directory */
+	root = proc_mkdir(PT_ROOT, NULL);
+	if(root == NULL)
+	{
+		printk("proc_mkdir return NULL!\n");
+		goto pt_out;
+	}
+
+	/* create entries */
+	pppoe = create_proc_entry("pppoe", 0644, root);
+	if(pppoe == NULL)
+	{
+		printk("create_proc_entry (pppoe) return NULL!\n");
+		goto pt_out;
+	}
+	pppoe->read_proc = proc_pppoe_read;
+	pppoe->write_proc = proc_pppoe_write;
+	
+	return 0;
+	
+pt_out:
+	pthrough_remove_proc_entry();
+	printk("Unable to create %s !!\n", PT_ROOT);
+	return -1;
+}
+
